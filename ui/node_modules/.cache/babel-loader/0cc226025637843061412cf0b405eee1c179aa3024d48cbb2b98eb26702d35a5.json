{"ast":null,"code":"var _jsxFileName = \"/home/ceg491x-group10/Downloads/CEG4912-Capstone-Project/ui/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport Header from './components/Header';\nimport ProgressBarContainer from './components/ProgressBarContainer';\nimport RecyclageResultats from './components/RecyclageResultats';\nimport io from 'socket.io-client';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [currentDateTime, setCurrentDateTime] = useState(new Date());\n  const [trashLevels, setTrashLevels] = useState([0, 0, 0, 0]);\n  const [recyclageResultats, setRecyclageResultats] = useState('');\n  useEffect(() => {\n    // Fonction pour effectuer la requête POST\n    const fetchData = async () => {\n      try {\n        const [res1, res2, res3, res4, resultRes] = await Promise.all([axios.post('http://localhost:5000/show_level1'), axios.post('http://localhost:5000/show_level2'), axios.post('http://localhost:5000/show_level3'), axios.post('http://localhost:5000/show_level4'), axios.post('http://localhost:5000/show_result')]);\n        const level1 = res1.data.level1;\n        const level2 = res2.data.level2;\n        const level3 = res3.data.level3;\n        const level4 = res4.data.level4;\n        const wasteType = resultRes.data.type;\n        setRecyclageResultats(wasteType);\n        setTrashLevels([level1, level2, level3, level4]);\n      } catch (error) {\n        console.error('Erreur lors de la récupération des données:', error);\n      }\n    };\n    const dataInterval = setInterval(fetchData, 5000); // every 5 seconds\n\n    // Function to update currentDateTime every second\n    const updateTime = () => {\n      setCurrentDateTime(new Date());\n    };\n\n    // Update time every second\n    const timeInterval = setInterval(updateTime, 1000);\n    return () => {\n      clearInterval(dataInterval);\n      clearInterval(timeInterval);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      currentDateTime: currentDateTime\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(RecyclageResultats, {\n      recyclageResultats: recyclageResultats\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ProgressBarContainer, {\n      trashLevels: trashLevels\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(App, \"cQdM3BRGDXro5Z3p5kYxE+0Al88=\");\n_c = App;\nexport default App;\n\n// function App() {\n//   const [currentDateTime, setCurrentDateTime] = useState(new Date());\n//   const [trashLevels, setTrashLevels] = useState([0, 0, 0, 0]);\n//   const [recyclageResultats, setRecyclageResultats] = useState([]);\n\n//   useEffect(() => {\n//     const socket = io('http://localhost:5000');  // Initialisez le socket et connectez-vous à votre serveur\n\n//     // Écoutez l'événement 'nouveaux_resultats' émis par le serveur\n//     socket.on('new_result', function(data) {\n//        console.log('New results:', data);\n//        const r = data.resultat;\n//        setRecyclageResultats(r); // Mettez à jour les résultats de recyclage dans l'état\n//     });\n\n//     // Fonction pour effectuer la requête POST et récupérer les données initiales\n//     const fetchData = async () => {\n//       try {\n//         const [res1, res2, res3, res4] = await Promise.all([\n//           axios.post('http://localhost:5000/show_level1'),\n//           axios.post('http://localhost:5000/show_level2'),\n//           axios.post('http://localhost:5000/show_level3'),\n//           axios.post('http://localhost:5000/show_level4')\n//         ]);\n\n//         const level1 = res1.data.level1;\n//         const level2 = res2.data.level2;\n//         const level3 = res3.data.level3;\n//         const level4 = res4.data.level4;\n\n//         setTrashLevels([level1, level2, level3, level4]);\n//       } catch (error) {\n//         console.error('Erreur lors de la récupération des données :', error);\n//       }\n//     };\n\n//     const dataInterval = setInterval(fetchData, 5000); // Récupérez les données initiales toutes les 5 secondes\n\n//     // Fonction pour mettre à jour currentDateTime toutes les secondes\n//     const updateTime = () => { setCurrentDateTime(new Date()); };\n\n//     // Mettez à jour l'heure toutes les secondes\n//     const timeInterval = setInterval(updateTime, 1000);\n\n//     return () => {\n//       clearInterval(dataInterval);\n//       clearInterval(timeInterval);\n//       // socket.disconnect();  // Déconnectez-vous du socket lors du démontage du composant\n//     };\n//   }, []);\n\n//   return (\n//     <>\n//       <Header currentDateTime={currentDateTime} />\n//       <RecyclageResultats recyclageResultats={recyclageResultats} />\n//       <ProgressBarContainer trashLevels={trashLevels} />\n//     </>\n//   );\n// }\n\n// export default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","axios","Header","ProgressBarContainer","RecyclageResultats","io","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","currentDateTime","setCurrentDateTime","Date","trashLevels","setTrashLevels","recyclageResultats","setRecyclageResultats","fetchData","res1","res2","res3","res4","resultRes","Promise","all","post","level1","data","level2","level3","level4","wasteType","type","error","console","dataInterval","setInterval","updateTime","timeInterval","clearInterval","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/ceg491x-group10/Downloads/CEG4912-Capstone-Project/ui/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport Header from './components/Header';\nimport ProgressBarContainer from './components/ProgressBarContainer';\nimport RecyclageResultats from './components/RecyclageResultats';\nimport io from 'socket.io-client';\nimport './App.css';\n\nfunction App() {\n  const [currentDateTime, setCurrentDateTime] = useState(new Date());\n  const [trashLevels, setTrashLevels] = useState([0, 0, 0, 0]);\n  const [recyclageResultats, setRecyclageResultats] = useState('');\n\n  useEffect(() => {\n    // Fonction pour effectuer la requête POST\n    const fetchData = async () => {\n      try {\n        const [res1, res2, res3, res4, resultRes] = await Promise.all([\n          axios.post('http://localhost:5000/show_level1'),\n          axios.post('http://localhost:5000/show_level2'),\n          axios.post('http://localhost:5000/show_level3'),\n          axios.post('http://localhost:5000/show_level4'),\n          axios.post('http://localhost:5000/show_result')\n        ]);\n\n        const level1 = res1.data.level1;\n        const level2 = res2.data.level2;\n        const level3 = res3.data.level3;\n        const level4 = res4.data.level4;\n        const wasteType = resultRes.data.type;\n\n        setRecyclageResultats(wasteType);\n        setTrashLevels([level1, level2, level3, level4]);\n\n      } catch (error) {\n        console.error('Erreur lors de la récupération des données:', error);\n      }\n    };\n\n    const dataInterval = setInterval(fetchData, 5000);// every 5 seconds\n\n// Function to update currentDateTime every second\nconst updateTime = () => {setCurrentDateTime(new Date());};\n\n// Update time every second\nconst timeInterval = setInterval(updateTime, 1000);\n\n\n    return () => {clearInterval(dataInterval);\n                  clearInterval(timeInterval);}\n  }, []);  \n\n  return (\n    <>\n      <Header currentDateTime={currentDateTime} />\n      <RecyclageResultats recyclageResultats={recyclageResultats} />\n      <ProgressBarContainer trashLevels={trashLevels} />\n    </>\n  );\n}\n\nexport default App;\n\n// function App() {\n//   const [currentDateTime, setCurrentDateTime] = useState(new Date());\n//   const [trashLevels, setTrashLevels] = useState([0, 0, 0, 0]);\n//   const [recyclageResultats, setRecyclageResultats] = useState([]);\n\n//   useEffect(() => {\n//     const socket = io('http://localhost:5000');  // Initialisez le socket et connectez-vous à votre serveur\n\n//     // Écoutez l'événement 'nouveaux_resultats' émis par le serveur\n//     socket.on('new_result', function(data) {\n//        console.log('New results:', data);\n//        const r = data.resultat;\n//        setRecyclageResultats(r); // Mettez à jour les résultats de recyclage dans l'état\n//     });\n\n//     // Fonction pour effectuer la requête POST et récupérer les données initiales\n//     const fetchData = async () => {\n//       try {\n//         const [res1, res2, res3, res4] = await Promise.all([\n//           axios.post('http://localhost:5000/show_level1'),\n//           axios.post('http://localhost:5000/show_level2'),\n//           axios.post('http://localhost:5000/show_level3'),\n//           axios.post('http://localhost:5000/show_level4')\n//         ]);\n\n//         const level1 = res1.data.level1;\n//         const level2 = res2.data.level2;\n//         const level3 = res3.data.level3;\n//         const level4 = res4.data.level4;\n\n//         setTrashLevels([level1, level2, level3, level4]);\n//       } catch (error) {\n//         console.error('Erreur lors de la récupération des données :', error);\n//       }\n//     };\n\n//     const dataInterval = setInterval(fetchData, 5000); // Récupérez les données initiales toutes les 5 secondes\n\n//     // Fonction pour mettre à jour currentDateTime toutes les secondes\n//     const updateTime = () => { setCurrentDateTime(new Date()); };\n\n//     // Mettez à jour l'heure toutes les secondes\n//     const timeInterval = setInterval(updateTime, 1000);\n\n//     return () => {\n//       clearInterval(dataInterval);\n//       clearInterval(timeInterval);\n//       // socket.disconnect();  // Déconnectez-vous du socket lors du démontage du composant\n//     };\n//   }, []);\n\n//   return (\n//     <>\n//       <Header currentDateTime={currentDateTime} />\n//       <RecyclageResultats recyclageResultats={recyclageResultats} />\n//       <ProgressBarContainer trashLevels={trashLevels} />\n//     </>\n//   );\n// }\n\n// export default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}